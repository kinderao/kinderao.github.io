<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-01T15:06:21.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kubernetes认证</title>
    <link href="http://yoursite.com/2017/03/28/Kubernetes%E8%AE%A4%E8%AF%81/"/>
    <id>http://yoursite.com/2017/03/28/Kubernetes认证/</id>
    <published>2017-03-28T08:19:54.000Z</published>
    <updated>2017-04-01T15:06:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kubernetes认证"><a href="#kubernetes认证" class="headerlink" title="kubernetes认证"></a>kubernetes认证</h1><blockquote>
<p>Kubernetes集群的操作可以通过apiserver来进行操作，kubectl命令最终也是调用的apiserver，如果想要获取对apiserver进行操作，需要先通过其认证</p>
</blockquote>
<p>api-server的认证方式：</p>
<ul>
<li><p>基本认证：basic-auth</p>
<p>–basic-auth-file=/path/to/basic-auth.csv<br>在basic-auth.csv中拥有以列为单位的认证信息，格式为password，username，uid</p>
<p><strong><em>示例：</em></strong></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">passwd，kinderao，1</div><div class="line">password2，test，2</div></pre></td></tr></table></figure>
<p>  然后在 kube-apiserver启动的时候加上–basic-auth-file=/path/to/basic-auth.csv这个参数，启动起来过后再在使用k8s的api就需要加上认证信息，否则就会unauthorized，加认证信息的方法是在http请求的header中添加一个Authorization，value是Basic base64编码后的用户名密码信息</p>
</li>
<li><p>Token认证：token-auth<br> –token-auth-file=/path/to/token-auth.csv<br>在token-auth.csv中拥有以列为单位的认证信息，格式为token，username，uid</p>
<p>  <strong><em>示例</em></strong></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">token,kinderao,1</div><div class="line">token2,kinderao2,2</div></pre></td></tr></table></figure>
<p>  同样也是在apiserver的启动参数里面加入–token-auth-file=/path/to/token-auth.csv这个参数，然后在请求的时候同样在header中添加Authorization，value是Bearer token</p>
</li>
<li><p>CA证书认证：<br>在使用证书认证之前首先需要申请证书，证书可以通过权威CA来申请，也可以通过自签证书，不过部署kubernetes的大多数环境都是内网环境，所以更多的还是使用的是自签证书。<br>生成证书的步骤如下：</p>
<ul>
<li><p>首先需要你的linux系统上安装有openssl，大多数的linux发行版都带有这个工具，使用openssl生成根证书cacert：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 生成密钥</div><div class="line">openssl genrsa -out ca.key 2048</div><div class="line"># 生成根证书</div><div class="line">openssl req -x509 -nodes -key ca.key -subj &quot;/CN=yourcomany.com&quot; -days 5000 -out ca.crt</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>- 然后为server生成证书：

    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 生成server的密钥</div><div class="line">openssl genrsa -out server.key 2048</div><div class="line"># 生成证书申请，其中的hostname需要填入你的服务器的域名或者ip地址，这个地方有个坑</div><div class="line"># 就是在这填入的是什么地址，在client请求的时候就要使用这个地址，之前配的是ip，但是请求的时候使用主机名，导致一直没有出现bad certificate的问题</div><div class="line">openssl req -new -key server.key -subj &quot;/CN=`hostname`&quot; -out server.csr</div><div class="line"># 使用刚才生成的根证书以及密钥来生成server的证书</div><div class="line">openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 5000</div></pre></td></tr></table></figure>

- 再为client生成证书：

    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 生成client的密钥</div><div class="line">openssl genrsa -out client.key 2048</div><div class="line"># 生成证书申请，这里需要填的地址和上面的server一致即可</div><div class="line">openssl req -new -key client.key -subj &quot;/CN=`hostname`&quot; -out client.csr</div><div class="line"># 使用根证书和密钥来生成client的证书</div><div class="line">openssl x509 -req -in client.csr -CA ca.crt -CAcreateserial -out client.crt -days 5000</div></pre></td></tr></table></figure>
</code></pre><ul>
<li><p>配置api-server的启动参数<br> 在apiserver的启动参数中加上下面的启动参数</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">--secure-port=443 </div><div class="line">--client_ca_file=/root/genkey/ca.crt </div><div class="line">--tls-private-key-file=/root/genkey/server.key </div><div class="line">--tls-cert-file=/root/genkey/server.crt</div></pre></td></tr></table></figure>
<p>  也可以放到/etc/kubernets/apiserver配置文件的args参数里面<br>  启动kube-apiserver会看见一下日志：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      I0330 05:17:46.582385    4776 config.go:531] Will report 10.0.0.103 as public IP address.</div><div class="line">[restful] 2017/03/30 05:17:46 log.go:30: [restful/swagger] listing is available at https://10.0.0.103:443/swaggerapi/</div><div class="line">[restful] 2017/03/30 05:17:46 log.go:30: [restful/swagger] https://10.0.0.103:443/swaggerui/ is mapped to folder /swagger-ui/</div><div class="line">I0330 05:17:46.950556    4776 serve.go:104] Serving securely on 0.0.0.0:443</div><div class="line">I0330 05:17:46.950618    4776 serve.go:118] Serving insecurely on 127.0.0.1:8080</div></pre></td></tr></table></figure>
<p>  我们在本机上使用curl来验证一下</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl https://hostname:443 --cacert ca.crt --key client.key --cert client.crt</div></pre></td></tr></table></figure>
<p>  以后的请求都需要带有根证书和client key和client的证书</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;kubernetes认证&quot;&gt;&lt;a href=&quot;#kubernetes认证&quot; class=&quot;headerlink&quot; title=&quot;kubernetes认证&quot;&gt;&lt;/a&gt;kubernetes认证&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Kubernetes集群的操作可以
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>毕业前的目标以及安排</title>
    <link href="http://yoursite.com/2017/03/05/%E6%AF%95%E4%B8%9A%E5%89%8D%E7%9A%84%E7%9B%AE%E6%A0%87%E5%8F%8A%E5%AE%89%E6%8E%92/"/>
    <id>http://yoursite.com/2017/03/05/毕业前的目标及安排/</id>
    <published>2017-03-05T01:57:57.000Z</published>
    <updated>2017-03-05T02:01:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>时光荏苒，我已不再是还可以在大学校园里可以半夜上网到2点，第二天一觉睡到中午，点个外卖，吃了就去球馆打球的大学生了，还有四个月，就要彻底离开大学校园，虽然已经离校实习了将近8个多月，但是真正要毕业和未毕业还是差距挺大的。废话太多了，进入正题吧</p>
</blockquote>
<p>去年7月开始实习，做安卓开发，主要的技术栈也是Java。做了4个月的安卓开发，也独立开发出了一款国家电网内部使用的app，算是大学中第一个稍微拿的出手的作品，不过从代码的质量上来讲，那款App实在是菜的不能再菜了，后面在一位学姐的的介绍下进入另外一家公司，从事docker方面的一家创业型小公司，我也又开始做后台开发，其实之前<code>JavaWeb</code>的基础还是停留在<code>servlet，jsp</code>顶多能看得懂点<code>struts，hibernate，spring</code>的地步。进入公司后短时间内还是了解以及学习到了很多的新东西，有的是之前听过的，有的是之前根本没有听过的。<code>spring boot，vuejs，docker，k8s，spring cloud，微服务架构</code>还有很多项目开发中用到的工具<code>gitlab，jira</code>等等，对于我这种认知还是停留在jsp的人来说，接收到了很多的新东西（其实慢慢的也发现很多很新潮的东西、技术，其实归根结底还是那些最基础的东西：数据结构，数据库原理这些东西），在这个公司已经4个月了，但是长进好像并没有想象中的那么快，也可能是我太着急了。所以做下总结，已经对下一阶段的安排</p>
<h3 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h3><p>毕业设计是个最重要的问题，从今天开始就要着手开始做毕业设计了，我准备使用Python来开发一款web系统，选用Python是因为我认为Python是一个程序员都应该学会的语言，你可以没事用它来爬爬别人网站的东西，也可以做些稀奇古怪的小玩意儿，对爱折腾的我来说简直太有诱惑力了，之前在折腾Linux没时间，趁着做毕业设计，刚好可以学下Python，随便把毕业设计给做了。准备使用Python的flask框架作为后端，然后vuejs做前端。先把技术给定下来，至于做什么，我是想做个商城系统，但是考虑到时间问题，到时候不一定能做完。所以目前先把Python学会再说吧。</p>
<ul>
<li>今天3月5号，在15号之前把Python基础学完以及把Flask的用法基本了解。</li>
</ul>
<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>由于之前的前端知识不是很熟，所以可能边做顺便还要再复习一下html，css的东西，再把JavaScript基础给过一遍。</p>
<ul>
<li>15号 - 25号，把html，css的东西给过一遍，然后像什么bootstrap基本能够都会用。</li>
</ul>
<p>然后就可以先把毕设的前端的东西给实现了。</p>
<p>然后其他的东西就在工作之余抽时间给做了</p>
<h3 id="Java-web"><a href="#Java-web" class="headerlink" title="Java web"></a>Java web</h3><p>由于是做java开发，所以java还是老本行</p>
<p>4月20号之前：</p>
<ul>
<li><p>把spring boot以及spring cloud的官方文档给过一遍</p>
</li>
<li><p>自己搭建出一个微服务的框架出来</p>
</li>
<li><p>深入研究一下orm框架，以及复习复习sql，和数据库设计</p>
</li>
</ul>
<h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>之前学docker的时候学的比较粗略，大概看了一遍用法，很多东西都比较模糊，只是勉强能够用用</p>
<p>花个三四天时间：</p>
<ul>
<li><p>把docker官网上的Demo都给过一遍，多写几个dockerfile，docker compose文件跑跑</p>
</li>
<li><p>把k8s，rancher容器编排工具的相关用法知识等捋一捋，写几篇文章</p>
</li>
</ul>
<h3 id="看书"><a href="#看书" class="headerlink" title="看书"></a>看书</h3><p>尽量抽时间看看 《clean code》，《重构》，《代码大全》 《算法》这些书</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;时光荏苒，我已不再是还可以在大学校园里可以半夜上网到2点，第二天一觉睡到中午，点个外卖，吃了就去球馆打球的大学生了，还有四个月，就要彻底离开大学校园，虽然已经离校实习了将近8个多月，但是真正要毕业和未毕业还是差距挺大的。废话太多了，进入正题吧&lt;/p
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Github和hexo搭建个人博客</title>
    <link href="http://yoursite.com/2017/02/25/%20%E4%BD%BF%E7%94%A8GitHub%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/02/25/ 使用GitHub与hexo搭建个人博客/</id>
    <published>2017-02-25T08:41:08.000Z</published>
    <updated>2017-02-27T01:42:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>对于程序员来说，写博客是一个好的习惯，今天给大家介绍一下怎么使用<code>github</code>和<code>hexo</code>来搭建一个博客。</p>
</blockquote>
<p>使用github的page服务来搭建博客有几个好处：</p>
<ol>
<li>显得比较有geek范儿，跟是用来csdn等博客平台相比，需要一定的动手与折腾能力</li>
<li>和其他的博客平台相比，可以自己完全控制现实的内容，哪的样式不好看，不喜欢，直接动手改css样式即可，和其他的博客平台满是广告和有点丑爆的界面相比，有一种自己掌控全局的感觉，而不是将自己的东西交给别人托管</li>
<li>写博客来说毕竟还是要稳定比较好，虽然说自己也可以写一个博客系统或者使用WordPress来搭建一个博客，但是东西放在云服务器上万一哪天忘了续费，或者服务器挂了数据丢失那不是太可惜了。而github博客是把博客内容全放在github上面，至少不会担心数据稳定性的问题。而且借助于git在什么地方，换台电脑使用git 将博客pull下来就能接着写。</li>
</ol>
<hr>
<p>废话有点多，现在开始吧:</p>
<p>首先你需要有个<code>Git</code>，这个东西应该大家都装了的，毕竟是吃饭干活必备的家伙，</p>
<p>第二：需要装有<code>NodeJs</code>,这里主要是要用到随同<code>NodeJs</code>一起的<code>npm</code>包管理工具，npm和nodejs的关系应该就像maven之于java，composer之于php，可以允许用户直接从npm服务器上下载别人编写好的第三方包到本地使用，我们就是借助于<code>npm</code>下载<code>hexo</code></p>
<p>mac用户可以使用brew安装nodejs<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install nodejs</div></pre></td></tr></table></figure></p>
<p>windows用户就要去nodejs的官网上面下载安装包来进行安装<a href="https://nodejs.org/zh-cn/" target="_blank" rel="external">NodeJs下载地址</a><br>安装完成后将其添加到path路径中，就可以直接在cmd中使用npm命令了</p>
<p>正题开始： 安装hexo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
<p>安装过程可能会比较慢，因为会去国外的npm服务器上拉取依赖，你也可以设置国内的npm镜像，比较好用的是淘宝的npm镜像服务器，<a href="https://npm.taobao.org/" target="_blank" rel="external">设置教程</a><br>安装完成后可以使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo -v</div></pre></td></tr></table></figure></p>
<p>来验证hexo有没有安装成功<br><img src="http://ok8j2fjtv.bkt.clouddn.com/Smt0S" alt="Untitled Image"></p>
<p>如下图一样，打印出hexo的信息就代表安装成功，离革命成功又进了一步</p>
<p>然后我们在我们的本地新建一个文件夹，用来存放hexo的配置信息，以及我们即将要写的博客文件，进入该文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir ~/hexo-test </div><div class="line"><span class="built_in">cd</span> ~/hexo-test</div><div class="line">hexo init</div></pre></td></tr></table></figure></p>
<p>初始化会去hexo服务器下载一些相关的资源，然后安装对应的依赖，依赖安装完成后会显示安装过的依赖列表<br><img src="http://ok8j2fjtv.bkt.clouddn.com/FjChW" alt="Untitled Image"><br><img src="http://ok8j2fjtv.bkt.clouddn.com/IYsHZ" alt="Untitled Image"></p>
<p>完后过后可以在刚才的文件中看到生成了以下的内容<br><img src="http://ok8j2fjtv.bkt.clouddn.com/PpIr0" alt="Untitled Image"></p>
<ul>
<li>_comfig.yml： 主要存放的是hexo的相关配置，比如等会要进行的主题，github账户等等都是在这里边进行配置,hexo的大部分配置都在这个文件里面</li>
<li>node_modules： hexo的依赖包</li>
<li>package.json：  hexo的依赖描述文件</li>
<li>scaffolds：模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</li>
<li>source：资源文件夹是存放用户资源的地方。除 <em>posts 文件夹之外，开头命名为 </em> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</li>
<li>themes： 主题文件夹，Hexo 会根据主题来生成静态页面。</li>
</ul>
<p>现在我们使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo server</div></pre></td></tr></table></figure></p>
<p><img src="http://ok8j2fjtv.bkt.clouddn.com/gfgJc" alt="Untitled Image"></p>
<p>打开浏览器，输入<a href="localhost:4000" target="_blank" rel="external">localhost:4000</a>，就能看到我们的博客界面了。</p>
<p><img src="http://ok8j2fjtv.bkt.clouddn.com/5FrId" alt="Untitled Image"><br>到此我们大部分的工作就已经差不多了，不过我们还需要做些其他的调整，比如将博客部署到GitHub上面，以及调整hexo生成的html的样式主题，让其看起来好看一些。</p>
<p>部署到GitHub上面：<br>首先我们要去我们的github账户上面新建一个repostory，命名必须为yourname.github.io,比如我的github用户名为kinderao，那么仓库名称为kinderao.github.io,这个地方必须按照用户名命名。<br>然后继续bash中输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>安装hexo的部署插件<br>然后编辑（hexo-test）博客目录下的_config.yml文件，找到deploy节点，<br><img src="http://ok8j2fjtv.bkt.clouddn.com/34pWG" alt="Untitled Image"></p>
<p>然后将type设置为git，repo设置为刚才在github上面新建的仓库地址，现在我们在bash中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy</div></pre></td></tr></table></figure></p>
<p>这样我们博客就已经部署到github上了，我们可以打开浏览器，输入github用户名.github.io，我的账户名为kinderao，所以我的博客地址为kinderao.github.io，你就可以看到博客已经成功的部署到github上了。</p>
<p>如果对于博客的界面感觉不太满意，下面教大家修改主题，在<a href="https://hexo.io/themes/" target="_blank" rel="external">hexo官网</a>上有很多漂亮的主题，选择自己喜欢的主题，然后将其拷贝或者使用git pull到theme文件夹下，然后再次回到_config.yml文件中修改theme节点，修改为对应的主题名称，然后重新使用hexo生成一次网页，就可以看到漂亮的主题已经成功的应用到了网页上了。</p>
<p>这里给大家推荐一下自己使用的主题，apollo主题，<a href="https://github.com/pinggod/hexo-theme-apollo" target="_blank" rel="external">主题地址</a>。</p>
<p>到此基本上我们的博客也就搭建成功了。每次需要写博客可以使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo n</div></pre></td></tr></table></figure></p>
<p>新建一篇博客，也可以直接在soure文件夹下的_post文件夹下新建一个markdown文件，然后hexo会自动重载md文件，也就可以在本地浏览器上预览生成的网页，觉得写得差不多了过后，使用deploy命令就可以将其部署到github上了。</p>
<p>另外如果大家写博客需要插入图片的话，由于GitHub的网络不是特别好，所以图片传上去会挂，推荐大家使用图床结合markdown来写博客，我自己使用的是七牛的云存储来做图床，可以注册账号，有免费的10个g流量，基本上够用，而且只要把图片一传到七牛，然后拿着外链粘贴到markdown中，markdown中就只用保存文字内容即可，随便把里面的内容粘贴到其他的平台就可以直接发布博客了，而不用像之前一张图片一张图片的上传。</p>
<p>由于一直手动上传图片到七牛也是一件重复低效的事，这里给大家推荐一下ipic图床软件，一个专注于图片上传的软件，只需要一个快捷键就能将图片上传上去，或者是使用mweb或者wordmark这两款带图床上传功能的markdown编辑器，这几款软件都是收费的（逃）。虽然收费，不过还是推荐大家使用哈，毕竟还是可以提高我们的工作效率，专注于博客本身。<br><img src="http://ok8j2fjtv.bkt.clouddn.com/81qx1" alt="Untitled Image"></p>
<p><img src="http://ok8j2fjtv.bkt.clouddn.com/URbJq" alt="Untitled Image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;对于程序员来说，写博客是一个好的习惯，今天给大家介绍一下怎么使用&lt;code&gt;github&lt;/code&gt;和&lt;code&gt;hexo&lt;/code&gt;来搭建一个博客。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用github的page服务来搭建博客有几个好处
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://yoursite.com/2017/02/25/2017-02-25-test/"/>
    <id>http://yoursite.com/2017/02/25/2017-02-25-test/</id>
    <published>2017-02-25T08:34:50.000Z</published>
    <updated>2017-02-25T08:37:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><blockquote>
<p>hahahah</p>
</blockquote>
<p>this is my first post </p>
<p><img src="http://ok8j2fjtv.bkt.clouddn.com/AdEmm" alt="Untitled Image"></p>
<p><img src="http://ok8j2fjtv.bkt.clouddn.com/ZBBd3" alt="Untitled Image"></p>
<p><img src="http://ok8j2fjtv.bkt.clouddn.com/1w0R4" alt="Untitled Image"></p>
<p><img src="http://ok8j2fjtv.bkt.clouddn.com/RRR1R" alt="Untitled Image"></p>
]]></content>
    
    <summary type="html">
    
      this is for test apollp theme
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/02/25/hello-world/"/>
    <id>http://yoursite.com/2017/02/25/hello-world/</id>
    <published>2017-02-25T08:05:37.000Z</published>
    <updated>2017-02-25T08:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
